<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Backend Wiki]]></title><description><![CDATA[I write about code 'n stuff]]></description><link>http://github.com/dylang/node-rss</link><image><url>/icon.png</url><title>Backend Wiki</title><link></link></image><generator>RSS for Node</generator><lastBuildDate>Fri, 15 Mar 2024 05:33:28 GMT</lastBuildDate><atom:link href="/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sat, 09 Mar 2024 04:00:00 GMT</pubDate><copyright><![CDATA[2024 Kevin Hotz]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[kevin@example.com]]></managingEditor><webMaster><![CDATA[kevin@example.com]]></webMaster><ttl>60</ttl><item><title><![CDATA[Introducing Design Patterns]]></title><description><![CDATA[<p>Design patterns in object-oriented software serve as a well-equipped toolbox, 
offering vetted solutions to frequent, recurring challenges.
They can help us find abstractions to tackle the difficult problem of organizing an application into
objects.  </p>
<p>Design patterns provide a clear description of the issue, propose a solution, detail the appropriate context for its application, and outline the potential outcomes of its use.<br />
We can categorize patterns based on their intent, falling into three primary types [1].</p>
<h1 id="creationalpatterns">Creational Patterns</h1>
<p>Focused on the process of object creation, creational patterns provide mechanisms to enhance flexibility and encapsulation during instantiation.
Some important creational patterns include:</p>
<ul>
<li><strong>Factory method pattern</strong>: Delegate instantiation to subclasses.</li>
<li><strong>Builder pattern</strong>: Separate construction from representation.</li>
<li><strong>Singleton pattern</strong>: Ensure a single instance.</li>
<li><strong>Prototype pattern</strong>: Copy existing objects to create a new one.</li>
</ul>
<p>But why not stick to the constructor for instantiating objects you ask?
Calling the constructor <em>always</em> creates an object, which reduces flexibility regarding object creation and introduces
a tight coupling between the implementation and the client.</p>
<h1 id="structuralpatterns">Structural Patterns</h1>
<p>Structural patterns outline methods for combining classes and objects to form larger structures, facilitating efficient composition.
Some important structural patterns include:</p>
<ul>
<li><strong>Adapter Pattern</strong>: Convert an interface to one the client expects.</li>
<li><strong>Decorator Pattern</strong>: Decorate an object with additional functionalities.</li>
<li><strong>Facade Pattern</strong>: Provide a simplified interface, hiding complexity.</li>
<li><strong>Composite Pattern</strong>: Favour composition over inheritance to reduce coupling.</li>
</ul>
<h1 id="behavioralpatterns">Behavioral Patterns</h1>
<p>Behavioral patterns govern component interaction, aiming to improve communication and the delegation of responsibilities to enhance maintainability.
Some important behavioral patterns include:
-<strong>Listener Pattern</strong>: Inform observers about certain events.
-<strong>Visitor Pattern</strong>: Allow you to define new operations without changing the classes on which they operate.
-<strong>Command Pattern</strong>: Represent a request to an object.
-<strong>Strategy Pattern</strong>: Make a series of algorithms interchangeable and choose your strategy at runtime.</p>
<p><strong>Check out the remaining posts of this series to learn about some common design patterns!</strong></p>
<p><em>References</em></p>
<p>[1] Erich Gamma â€¦ [and others]. Design Patterns : Elements of Reusable Object-Oriented Software. Reading, Mass. :Addison-Wesley, 1995.</p>]]></description><link>/blog/design-patterns-intro</link><guid isPermaLink="true">/blog/design-patterns-intro</guid><category><![CDATA[Design Patterns]]></category><category><![CDATA[Object Oriented Programming]]></category><dc:creator><![CDATA[Kevin Hotz]]></dc:creator><pubDate>Wed, 13 Mar 2024 16:55:57 GMT</pubDate></item></channel></rss>